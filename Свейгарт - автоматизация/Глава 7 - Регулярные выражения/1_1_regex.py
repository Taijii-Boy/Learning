# 1. Импортируйте модуль регулярных выражений с помощью
# инструкции import re.
# 2. Создайте объект Regex с помощью функции re. compile (). (Ему
# должна быть передана необработанная строка поискового шаблона
# регулярного выражения.)
# 3. Передайте строку, в которой выполняется поиск, методу search ()
# объекта Regex. Этот метод возвращает объект Match.
# 4. Вызовите метод group () объекта Match, чтобы получить строку,
# которая содержит найденный текст, соответствующий заданному
# регулярному выражению.
# ---------------------------------------------------------------
# символы, которые необходимо экранировать \:
# . ^ $ * + ? { } [ ]  \ | ( )

import re

# phone_num_regex = re.compile(r'\d\d\d-\d\d\d-\d\d\d\d')
# mo = phone_num_regex.search('Мой номер телефона - 415-232-4351')
# print(f'Найденный номер телефона: {mo.group()}')

# --------------------------------------------
# # Создание групп с помощью круглых скобок
# -----------------------------------------------

# phone_num_regex = re.compile(r'(\d\d\d)-(\d\d\d-\d\d\d\d)')
# mo = phone_num_regex.search('Мой номер телефона - 415-232-4351')
# area_code, main_number = mo.groups()
# print(mo.groups())
# print(mo.group(1))
# print(mo.group(2))
# print(area_code)
# print(main_number)


# -----------------------------------------------
# Выбор альтернативных групп с помощью канала
# -----------------------------------------------

# hero_regex = re.compile(r'Бэтмен|Тина Фей')
# mo1 = hero_regex.search('Бэтмен и Тина Фей')
# print(mo1.group())
# mo2 = hero_regex.search('Тина Фей и Бэтмен')
# print(mo2.group())
# -----------------------------------------------

# bat_regex = re.compile(r'Бэт(мен|мобиль|коптер|бэт)')
# mo1 = bat_regex.search('Бэтмобиль потерял колесо')
# print(mo1.group())
# print(mo1.group(1))


# -----------------------------------------------
# Указание необязательной группы с помощью вопросительного знака  ?
# -----------------------------------------------

# bat_regex = re.compile(r'Бэт(ву)?мен')
# mo1 = bat_regex.search('Бэтмен - мой герой')
# mo2 = bat_regex.search('Бэтвумен - мой герой')
# print(mo1.group())
# print(mo2.group())
# -----------------------------------------------
# phone_regex = re.compile(r'(\d\d\d-)?(\d\d\d\-\d\d\d\d)')
# mo1 = phone_regex.search('Мой номер: 424-3231')
# mo2 = phone_regex.search('Мой номер: 232-423-3421')
# print(mo1.group())
# print(mo2.group())
# -----------------------------------------------
# Указание группы, повторяющейся нуль или несколько раз, с помощью звездочки *
# -----------------------------------------------
# bat_regex = re.compile(r'Бэт(ву)*мен')
# mo1 = bat_regex.search('Бэтмен - мой герой')
# print(mo1.group())
# mo2 = bat_regex.search('Бэтвумен - мой герой')
# print(mo2.group())
# mo3 = bat_regex.search('Бэтвувувувувумен - мой герой')
# print(mo3.group())

# ------------------------------------------------
# Указание группы, повторяющейся один или несколько раз, с помощью знака "плюс"
# ------------------------------------------------
# bat_regex = re.compile(r'Бэт(ву)+мен')
# mo1 = bat_regex.search('Бэтмен - мой герой')
# print(mo1 == None)
#
# mo2 = bat_regex.search('Бэтвумен - мой герой')
# print(mo2.group())
# mo3 = bat_regex.search('Бэтвувувувувумен - мой герой')
# print(mo3.group())


# ------------------------------------------------
# Указание количества повторений с помощью фигурных скобок
# ------------------------------------------------
# Следующие два регулярных выражения идентичны.
# (На){3}
# (На) (На) (На)
# Приведенные ниже регулярные выражения тоже идентичны.
# (На){3, 5}
# ( (На) (На) (На) ) | ( (На) (На) (На) (На) ) | ( (На) (На) (На) (На) (На) )
# Следующие регулярные выражения идентичны.
# (На){1, 3}
# (На) | (На) (На) | (На) (На) (На)

# (На){, 3}
# | (На) | (На) (На) | (На) (На) (На)

ha_regex = re.compile(r'(Ha){3}')
mo1 = ha_regex.search('HaHaHa dsfskajdlks HaHaHa')
print(mo1.group())
